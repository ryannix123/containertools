# Build on top of base CentOS 9 Stream image for x86_64 architecture
FROM quay.io/centos/centos:stream9

# Create a non-root user
RUN useradd -ms /bin/bash tools

# Update container libraries and install tools available from the repos
RUN dnf install -y epel-release && \
    dnf update -y && \
    dnf install -y \
      vim tar wget java-17-openjdk maven sudo zip gzip git rsync podman bash unzip openssh-clients \
      mysql postgresql \
      python3 python3-pip python3-devel && \
    dnf clean all

# Install Node.js
RUN dnf module list nodejs && \
    dnf module enable -y nodejs:20 && \
    dnf install -y nodejs npm && \
    npm install -g n && \
    n stable && \
    dnf clean all

# Install latest ArgoCD
RUN curl -sSL -o argocd https://github.com/argoproj/argo-cd/releases/latest/download/argocd-linux-amd64 && \
    install -m 555 argocd /usr/local/bin/argocd && rm argocd

# Install latest ArgoCD Autopilot
RUN VERSION=$(curl -s https://api.github.com/repos/argoproj-labs/argocd-autopilot/releases/latest | \
    grep '"tag_name"' | sed -E 's/.*"([^"]+)".*/\1/') && \
    curl -L https://github.com/argoproj-labs/argocd-autopilot/releases/download/"$VERSION"/argocd-autopilot-linux-amd64.tar.gz | tar zx && \
    chmod 555 argocd-autopilot-* && mv argocd-autopilot-* /usr/local/bin/argocd-autopilot

# Install latest OpenShift CLI (oc) and kubectl
RUN mkdir /ocp-tools && \
    wget https://mirror.openshift.com/pub/openshift-v4/clients/ocp/latest/openshift-client-linux.tar.gz -P /ocp-tools && \
    tar xvzf /ocp-tools/openshift-client-linux.tar.gz -C /ocp-tools oc kubectl && \
    install -m 755 /ocp-tools/oc /usr/local/bin/oc && \
    install -m 755 /ocp-tools/kubectl /usr/local/bin/kubectl && \
    rm -rf /ocp-tools

# Install latest odo CLI
RUN curl -L https://developers.redhat.com/content-gateway/file/pub/openshift-v4/clients/odo/v3.16.1/odo-linux-amd64 -o odo && \
    install -m 0755 odo /usr/local/bin/odo && rm odo

# Install Azure CLI
RUN rpm --import https://packages.microsoft.com/keys/microsoft.asc && \
    dnf install -y https://packages.microsoft.com/config/rhel/9.0/packages-microsoft-prod.rpm && \
    dnf install -y azure-cli && \
    dnf clean all

# Install AWS CLI
RUN curl -fsSL -o awscliv2.zip "https://awscli.amazonaws.com/awscli-exe-linux-x86_64.zip" && \
    echo "Checking AWS CLI archive integrity..." && \
    unzip -t awscliv2.zip && \
    unzip -q awscliv2.zip && \
    ./aws/install && \
    rm -rf aws awscliv2.zip

# Install Terraform from the official HashiCorp RPM repository
RUN dnf install -y yum-utils && \
    yum-config-manager --add-repo https://rpm.releases.hashicorp.com/RHEL/hashicorp.repo && \
    dnf install -y terraform && \
    dnf clean all

# Install Knative CLI (kn)
RUN curl -L https://github.com/knative/client/releases/download/knative-v1.12.0/kn-linux-amd64 -o kn && \
    chmod +x kn && \
    mv kn /usr/local/bin/

# Install Knative Functions CLI plugin (func)
RUN curl -L https://github.com/knative/func/releases/download/knative-v1.17.0/func_linux_amd64 -o func && \
    chmod +x func && \
    mv func /usr/local/bin/ && \
    # Create symbolic link for kn plugin
    ln -s /usr/local/bin/func /usr/local/bin/kn-func

# Install Helm
RUN curl -fsSL -o get_helm.sh https://raw.githubusercontent.com/helm/helm/main/scripts/get-helm-3 && \
    chmod 700 get_helm.sh && \
    ./get_helm.sh && \
    rm get_helm.sh

# Install Tekton CLI (tkn)
RUN curl -LO https://github.com/tektoncd/cli/releases/download/v0.40.0/tkn_0.40.0_Linux_x86_64.tar.gz && \
    mkdir -p /tmp/tkn-extract && \
    tar xvzf tkn_0.40.0_Linux_x86_64.tar.gz -C /tmp/tkn-extract && \
    ls -la /tmp/tkn-extract && \
    mv /tmp/tkn-extract/tkn /usr/local/bin/ && \
    rm -rf /tmp/tkn-extract tkn_0.40.0_Linux_x86_64.tar.gz

# Install Istio CLI (istioctl)
RUN curl -L https://istio.io/downloadIstio | ISTIO_VERSION=1.21.0 TARGET_ARCH=x86_64 sh - && \
    mv istio-1.21.0/bin/istioctl /usr/local/bin/ && \
    rm -rf istio-1.21.0

# Install Fortio
RUN curl -L https://github.com/fortio/fortio/releases/download/v1.68.0/fortio-linux_amd64-1.68.0.tgz -o fortio.tgz && \
    tar -xzf fortio.tgz --strip-components=2 usr/bin/fortio && \
    chmod +x fortio && \
    mv fortio /usr/local/bin/ && \
    rm fortio.tgz

# Create directory for optional local storage mount
RUN mkdir -p /home/tools/local-storage && chown -R tools:tools /home/tools/local-storage

# Switch to non-root user
USER tools

# Set WORKDIR
WORKDIR /home/tools

# Set PATH to include user's local bin directory
ENV PATH="/home/tools/.local/bin:${PATH}"

# Install Python packages and Ansible as the tools user
RUN pip3 install --user --upgrade pip && \
    pip3 install --user ansible==8.7.0 boto3 botocore \
    packaging msrest msrestazure requests[security] xmltodict \
    azure-mgmt-compute azure-mgmt-storage azure-mgmt-resource azure-mgmt-network \
    azure-mgmt-containerservice azure-identity azure-common azure-mgmt-core \
    azure-mgmt-authorization azure-mgmt-containerinstance azure-mgmt-containerregistry \
    azure-mgmt-dns azure-mgmt-web && \
    ansible-galaxy collection install ansible.posix amazon.aws azure.azcollection community.general community.crypto ansible.utils community.docker kubernetes.core --force && \
    # Install the Azure dependencies from the collection requirements file
    test -f ~/.ansible/collections/ansible_collections/azure/azcollection/requirements.txt && \
    pip3 install --user -r ~/.ansible/collections/ansible_collections/azure/azcollection/requirements.txt || echo "Azure requirements file not found"

CMD ["/bin/bash"]